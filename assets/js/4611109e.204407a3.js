"use strict";(self.webpackChunkgillian_platform_github_io=self.webpackChunkgillian_platform_github_io||[]).push([[131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),m=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?i.createElement(f,l(l({ref:t},p),{},{components:n})):i.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var m=2;m<r;m++)l[m]=n[m];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:2},l="Folder Structure",o={unversionedId:"Instantiations/C/structure",id:"Instantiations/C/structure",title:"Folder Structure",description:"Folders marked with the (PLDI20) annotation are out of scope of the PLDI 2020 Gillian Paper.",source:"@site/docs/Instantiations/C/structure.md",sourceDirName:"Instantiations/C",slug:"/Instantiations/C/structure",permalink:"/docs/Instantiations/C/structure",draft:!1,editUrl:"https://github.com/GillianPlatform/GillianPlatform.github.io/edit/source/docs/Instantiations/C/structure.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Symbolic Testing",permalink:"/docs/Instantiations/C/stests"},next:{title:"Gillian-JS",permalink:"/docs/Instantiations/JavaScript/"}},s={},m=[],p={toc:m};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"folder-structure"},"Folder Structure"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Folders marked with the (\u274cPLDI20) annotation are out of scope of the PLDI 2020 Gillian Paper.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Gillian-C")," can be found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gillian-C")," folder of the repository. Its implementation implementation consists of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Gillian-C"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bin"),": Contains the source of the ",(0,a.kt)("inlineCode",{parentName:"li"},"gillian-c")," executable."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"environment"),": Execution environment, not part of the repository, created using ",(0,a.kt)("inlineCode",{parentName:"li"},"esy init:env"),". It contains useful scripts for testing Gillian-C, and examples are copied in it so that they can be safely modified."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"examples"),": Various examples",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"concrete"),": Small data-structure examples for concrete execution"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"symbolic"),": Small data-structure examples for symbolic testing"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"klee"),": Same small data-structure examples as in ",(0,a.kt)("inlineCode",{parentName:"li"},"symbolic")," but written for usage with Klee."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"verification"),": Small data-structure examples for verification mode (\u274cPLDI20)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"act"),": Small data-structure examples for Automatic Compositional Testing mode (\u274cPLDI20)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lib"),": The core of Gillian-C",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gilgen.ml/mli"),": Compiler for C#m to GIL"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gil_logic_gen.ml"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"annot_lexer.mll"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"annot_parser.mly"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"cLogic.ml"),": Utils for handling a small annotation language for C (\u274cPLDI20)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueTranslation.ml/mli"),": Serialisation and deserialisation of CompCert values into GIL values"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"semantics.ml/mli"),": Symbolic Memory model and Concrete memory model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cRunner.ml"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"sRunner.ml"),": Configuration for the symbolic and concrete bulk testers (",(0,a.kt)("inlineCode",{parentName:"li"},"gillian-c bulk-wpst")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"gillian-c bulk-exec"),")"),(0,a.kt)("li",{parentName:"ul"},"Other files: Utils such as name generators or configuration flags."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runtime"),": Implementation of the internals and part of the C standard lib in GIL"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scripts"),": Various scripts for setting up the environment and executing analyses")))))}u.isMDXComponent=!0}}]);