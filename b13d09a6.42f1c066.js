(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{155:function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(9),a=n(0),o=n.n(a),l=n(157),c=(n(228),n(230),n(26),n(20),n(21),n(231),function(e){var t=e.publi;return o.a.createElement(a.Fragment,null,o.a.createElement("h3",null,"Authors"),o.a.createElement("ul",null,t.authors.map((function(e){return o.a.createElement("li",{key:e},e)}))),o.a.createElement("h3",{sidebar_label:"Abstract"},"Abstract"),o.a.createElement("p",null,t.abstract),o.a.createElement("h3",null,"Venue"),o.a.createElement("p",null,t.venue),o.a.createElement("h3",null,"Publication Date"),o.a.createElement("p",null,t.date),o.a.createElement("h3",null,"Identifiers"),o.a.createElement("ul",null,Object.entries(t.identifiers).map((function(e){var t=e[0],n=e[1],r=n.name,i=n.link;return o.a.createElement("li",{key:t},t,":",o.a.createElement("a",{href:i},r))}))))}),u="Jos\xe9 Fragoso Santos",s="Petar Maksimovi\u0107",p={title:"Gillian, Part I: Parametric Symbolic Execution for Real-World Programming Languages",authors:[u,s,"Sacha-\xc9lie Ayoun","Philippa Gardner"],abstract:"We introduce Gillian, a language-independent framework for the development of symbolic analysis tools. Gillian supports whole-program symbolic testing, semi-automatic verification, and automatic compositional testing using bi-abduction. It comes with meta-theoretical results that are parametric on the memory model of the target language and a modular implementation that closely follows the meta-theory, all designed to minimise the instantiation effort of the user. In this paper, we focus on the parametric symbolic execution engine at the core of Gillian and its associated meta-theory. We instantiate Gillian to obtain symbolic testing tools for JavaScript and C, and use these tools to find bugs in real-world code, with times that either outperform or are competitive with the existing language-specific tools.",venue:"TBA",date:"TBA",identifiers:{}};n.d(t,"frontMatter",(function(){return m})),n.d(t,"metadata",(function(){return f})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return g}));var m={id:"pldi20-ref",title:"Publication Reference",hide_title:!0},f={id:"publications/pldi20/pldi20-ref",title:"Publication Reference",description:"import Reference from '@theme/Reference';",source:"@site/docs/publications/pldi20/pldi20.mdx",permalink:"/docs/publications/pldi20/pldi20-ref",editUrl:"https://github.com/GillianPlatform/GillianPlatform.github.io/edit/source/docs/publications/pldi20/pldi20.mdx",sidebar:"someSidebar",previous:{title:"Gillian-C: Symbolic Testing",permalink:"/docs/c/cstest"},next:{title:"Differences between Paper and Implementation",permalink:"/docs/publications/pldi20/pldi20-diff"}},d=[],b={rightToc:d};function g(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"gillian-part-i-parametric-symbolic-execution-for-real-world-programming-languages"},"Gillian, Part I: Parametric Symbolic Execution for Real-World Programming Languages"),Object(l.b)(c,{publi:p,mdxType:"Reference"}))}g.isMDXComponent=!0},157:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),s=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=s(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),f=r,d=p["".concat(o,".").concat(f)]||p[f]||m[f]||a;return n?i.a.createElement(d,l({ref:t},u,{components:n})):i.a.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},228:function(e,t,n){"use strict";n(229)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},229:function(e,t,n){var r=n(17),i=n(19),a=n(23),o=/"/g,l=function(e,t,n,r){var i=String(a(e)),l="<"+t;return""!==n&&(l+=" "+n+'="'+String(r).replace(o,"&quot;")+'"'),l+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(l),r(r.P+r.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},230:function(e,t,n){var r=n(24).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||n(13)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},231:function(e,t,n){var r=n(17),i=n(74)(!0);r(r.S,"Object",{entries:function(e){return i(e)}})}}]);