{"header":"<h1>Module <code><span>Gil_parsing.Make</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Gil_parsing","href":"../index.html","kind":"module"},{"name":"Make","href":"#","kind":"module"}],"toc":[{"title":"Parameters","href":"#parameters","children":[]},{"title":"Signature","href":"#signature","children":[]}],"source_anchor":null,"preamble":"","content":"<h2 id=\"parameters\"><a href=\"#parameters\" class=\"anchor\"></a>Parameters</h2><div class=\"odoc-spec\"><div class=\"spec parameter anchored\" id=\"argument-1-Annot\"><a href=\"#argument-1-Annot\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> </span><span><a href=\"argument-1-Annot/index.html\">Annot</a></span><span> : <a href=\"../../Gillian/Gil_syntax/Annot/module-type-S/index.html\">Gillian.Gil_syntax.Annot.S</a></span></code></div></div><h2 id=\"signature\"><a href=\"#signature\" class=\"anchor\"></a>Signature</h2><div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-annot\"><a href=\"#type-annot\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> annot</span><span> = <a href=\"argument-1-Annot/index.html#type-t\">Annot.t</a></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-parsing_result\"><a href=\"#type-parsing_result\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> parsing_result</span><span> = </span><span>{</span></code><ol><li id=\"type-parsing_result.labeled_prog\" class=\"def record field anchored\"><a href=\"#type-parsing_result.labeled_prog\" class=\"anchor\"></a><code><span>labeled_prog : <span><span>(<a href=\"#type-annot\">annot</a>, string)</span> <a href=\"../../Gillian/Gil_syntax/Prog/index.html#type-t\">Gillian.Gil_syntax.Prog.t</a></span>;</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>The parsed program</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-parsing_result.init_data\" class=\"def record field anchored\"><a href=\"#type-parsing_result.init_data\" class=\"anchor\"></a><code><span>init_data : <span class=\"xref-unresolved\">Yojson</span>.Safe.t;</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Will be `Null if no <code>init_data</code> is parsed</p><span class=\"comment-delim\">*)</span></div></li></ol><code><span>}</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-parse_eprog_from_file\"><a href=\"#val-parse_eprog_from_file\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> parse_eprog_from_file : \u000A  <span>string <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-parsing_result\">parsing_result</a> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span></span></code></div><div class=\"spec-doc\"><p>Takes a path to a file and returns the parsed GIL program with its global environment.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-parse_eprog_from_string\"><a href=\"#val-parse_eprog_from_string\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> parse_eprog_from_string : \u000A  <span>string <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-parsing_result\">parsing_result</a> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span></span></code></div><div class=\"spec-doc\"><p>Takes a string containing a GIL program and parses it.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-eprog_to_prog\"><a href=\"#val-eprog_to_prog\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> eprog_to_prog : \u000A  <span><span class=\"optlabel\">?prog_path</span>:string <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span class=\"label\">other_imports</span>:\u000A    <span><span>(string\u000A     * <span>(<span>string <span class=\"arrow\">&#45;&gt;</span></span>\u000A     <span><span><span>(<a href=\"#type-annot\">annot</a>, string)</span> <a href=\"../../Gillian/Gil_syntax/Prog/index.html#type-t\">Gillian.Gil_syntax.Prog.t</a></span> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span>)</span>)</span>\u000A      list</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span><span>(<a href=\"#type-annot\">annot</a>, string)</span> <a href=\"../../Gillian/Gil_syntax/Prog/index.html#type-t\">Gillian.Gil_syntax.Prog.t</a></span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span><span>(<a href=\"#type-annot\">annot</a>, int)</span> <a href=\"../../Gillian/Gil_syntax/Prog/index.html#type-t\">Gillian.Gil_syntax.Prog.t</a></span> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span></span></code></div><div class=\"spec-doc\"><p>Converts a string-labelled <code>Prog.t</code> to an index-labelled <code>Prog.t</code>, resolving the imports in the meantime. The parameter <code>other_imports</code> is an association list that maps extensions to a parser and compiler. For example, it is possible to import a JSIL file in a GIL program using <code>import &quot;file.jsil&quot;;</code>. In order to do so, the <code>other_imports</code> list should contain the tuple <code>(&quot;jsil&quot;, parse_and_compile_jsil_file)</code> where <code>parse_and_compile_jsil_file</code> is a function that takes a file path, parses the file as a JSIL program, and compiles this to a GIL program.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-cache_labelled_progs\"><a href=\"#val-cache_labelled_progs\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> cache_labelled_progs : \u000A  <span><span><span>(string * <span><span>(<a href=\"#type-annot\">annot</a>, string)</span> <a href=\"../../Gillian/Gil_syntax/Prog/index.html#type-t\">Gillian.Gil_syntax.Prog.t</a></span>)</span> list</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  unit</span></code></div><div class=\"spec-doc\"><p>Caches a mapping from the output GIL filepaths to the corresponding sring-labelled GIL programs. Can be called before <code>eprog_to_prog</code> in order to allow the import-resolving mechanism to work without having to first write the GIL programs to file.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-parse_literal\"><a href=\"#val-parse_literal\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> parse_literal : \u000A  <span><span class=\"xref-unresolved\">Stdlib</span>.Lexing.lexbuf <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Gil_syntax/Literal/index.html#type-t\">Gillian.Gil_syntax.Literal.t</a> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span></span></code></div><div class=\"spec-doc\"><p>Parses a <code>Literal.t</code> from a lexbuf; raises <code>Failure</code> if parsing fails.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-parse_expression\"><a href=\"#val-parse_expression\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> parse_expression : \u000A  <span><span class=\"xref-unresolved\">Stdlib</span>.Lexing.lexbuf <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <a href=\"../../Gillian/Utils/Gillian_result/index.html#type-t\">Gillian.Utils.Gillian_result.t</a></span></span></code></div><div class=\"spec-doc\"><p>Parses a <code>Expr.t</code> from a lexbuf; raises <code>Failure</code> if parsing fails.</p></div></div>"}