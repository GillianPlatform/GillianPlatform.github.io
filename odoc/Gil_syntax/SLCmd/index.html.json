{"header":"<h1>Module <code><span>Gil_syntax.SLCmd</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Gil_syntax","href":"../index.html","kind":"module"},{"name":"SLCmd","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>GIL Separation-Logic Commands</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> t</span><span> = </span></code><ol><li id=\"type-t.Fold\" class=\"def variant constructor anchored\"><a href=\"#type-t.Fold\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Fold</span> <span class=\"keyword\">of</span> string\u000A  * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>\u000A  * <span><span>(string * <span><span>(string * <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> list</span>)</span> option</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Fold predicate</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Unfold\" class=\"def variant constructor anchored\"><a href=\"#type-t.Unfold\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Unfold</span> <span class=\"keyword\">of</span> string\u000A  * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>\u000A  * <span><span><span>(string * string)</span> list</span> option</span>\u000A  * bool</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Unfold predicate</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Package\" class=\"def variant constructor anchored\"><a href=\"#type-t.Package\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Package</span> <span class=\"keyword\">of</span> </span><span>{</span></code><ol><li id=\"type-t.lhs\" class=\"def record field anchored\"><a href=\"#type-t.lhs\" class=\"anchor\"></a><code><span>lhs : string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>;</span></code></li><li id=\"type-t.rhs\" class=\"def record field anchored\"><a href=\"#type-t.rhs\" class=\"anchor\"></a><code><span>rhs : string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>;</span></code></li></ol><code><span>}</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Magic wand packaging</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.GUnfold\" class=\"def variant constructor anchored\"><a href=\"#type-t.GUnfold\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">GUnfold</span> <span class=\"keyword\">of</span> string</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Global Unfold</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.ApplyLem\" class=\"def variant constructor anchored\"><a href=\"#type-t.ApplyLem\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">ApplyLem</span> <span class=\"keyword\">of</span> string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span> * <span>string list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Apply lemma</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SepAssert\" class=\"def variant constructor anchored\"><a href=\"#type-t.SepAssert\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SepAssert</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a> * <span>string list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Assert</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Invariant\" class=\"def variant constructor anchored\"><a href=\"#type-t.Invariant\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Invariant</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a> * <span>string list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Invariant</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Consume\" class=\"def variant constructor anchored\"><a href=\"#type-t.Consume\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Consume</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a> * <span>string list</span></span></code></li><li id=\"type-t.Produce\" class=\"def variant constructor anchored\"><a href=\"#type-t.Produce\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Produce</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a></span></code></li><li id=\"type-t.SymbExec\" class=\"def variant constructor anchored\"><a href=\"#type-t.SymbExec\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SymbExec</span></span></code></li></ol></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-map\"><a href=\"#val-map\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> map : \u000A  <span><span>(<span><a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Asrt/index.html#type-t\">Gillian.Gil_syntax.Asrt.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span>(<span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><ul class=\"at-tags\"><li class=\"deprecated\"><span class=\"at-tag\">deprecated</span> <p>Use <a href=\"../Visitors/class-endo/index.html\"><code>Visitors.endo</code></a> instead</p></li></ul></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_folding_info\"><a href=\"#val-pp_folding_info\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_folding_info : \u000A  <span><span><span>(string * <span><span>(string * <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> list</span>)</span> option</span> <span class=\"xref-unresolved\">Fmt</span>.t</span></span></code></div><div class=\"spec-doc\"><p>Pretty-printer of folding info</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_unfold_info\"><a href=\"#val-pp_unfold_info\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_unfold_info : <span><span><span><span>(string * string)</span> list</span> option</span> <span class=\"xref-unresolved\">Fmt</span>.t</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp\"><a href=\"#val-pp\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div><div class=\"spec-doc\"><p>Pretty-printer</p></div></div>"}