{"header":"<h1>Module <code><span>Gil_syntax.LCmd</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Gil_syntax","href":"../index.html","kind":"module"},{"name":"LCmd","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>GIL Logical Commands</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> t</span><span> = </span></code><ol><li id=\"type-t.If\" class=\"def variant constructor anchored\"><a href=\"#type-t.If\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">If</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> * <span><a href=\"#type-t\">t</a> list</span> * <span><a href=\"#type-t\">t</a> list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>If-then-else</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Branch\" class=\"def variant constructor anchored\"><a href=\"#type-t.Branch\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Branch</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Branching on a FO formual</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Macro\" class=\"def variant constructor anchored\"><a href=\"#type-t.Macro\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Macro</span> <span class=\"keyword\">of</span> string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Macros</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Assert\" class=\"def variant constructor anchored\"><a href=\"#type-t.Assert\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Assert</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Assert</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Assume\" class=\"def variant constructor anchored\"><a href=\"#type-t.Assume\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Assume</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Assume</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.AssumeType\" class=\"def variant constructor anchored\"><a href=\"#type-t.AssumeType\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">AssumeType</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> * <a href=\"../../Gillian/Gil_syntax/Type/index.html#type-t\">Gillian.Gil_syntax.Type.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Assume Type</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FreshSVar\" class=\"def variant constructor anchored\"><a href=\"#type-t.FreshSVar\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FreshSVar</span> <span class=\"keyword\">of</span> string</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>x := fresh_svar()</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SL\" class=\"def variant constructor anchored\"><a href=\"#type-t.SL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SL</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/SLCmd/index.html#type-t\">Gillian.Gil_syntax.SLCmd.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Separation-logic command</p><span class=\"comment-delim\">*)</span></div></li></ol></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-map\"><a href=\"#val-map\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> map : \u000A  <span><span>(<span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span>(<span><a href=\"../../Gillian/Gil_syntax/SLCmd/index.html#type-t\">Gillian.Gil_syntax.SLCmd.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/SLCmd/index.html#type-t\">Gillian.Gil_syntax.SLCmd.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><ul class=\"at-tags\"><li class=\"deprecated\"><span class=\"at-tag\">deprecated</span> <p>Use <a href=\"../Visitors/class-endo/index.html\"><code>Visitors.endo</code></a> instead</p></li></ul></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp\"><a href=\"#val-pp\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp : <span><a href=\"#type-t\">t</a> <span class=\"xref-unresolved\">Fmt</span>.t</span></span></code></div><div class=\"spec-doc\"><p>Pretty-printer</p></div></div>"}