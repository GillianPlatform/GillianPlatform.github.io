{"header":"<h1>Module <code><span>Gil_syntax.Branch_case</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../../index.html","kind":"page"},{"name":"Gillian","href":"../../index.html","kind":"module"},{"name":"Gil_syntax","href":"../index.html","kind":"module"},{"name":"Branch_case","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>Reasons for a branch in execution.</p><p>These are used to reason about execution when using the debugger.</p><p><i>Note: most of these haven't yet been properly reasoned about, so they won't be very informative.</i></p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> t</span><span> = </span></code><ol><li id=\"type-t.GuardedGoto\" class=\"def variant constructor anchored\"><a href=\"#type-t.GuardedGoto\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">GuardedGoto</span> <span class=\"keyword\">of</span> bool</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Effectively if/else; either true or false case</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LCmd\" class=\"def variant constructor anchored\"><a href=\"#type-t.LCmd\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LCmd</span> <span class=\"keyword\">of</span> int</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Logical command</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SpecExec\" class=\"def variant constructor anchored\"><a href=\"#type-t.SpecExec\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SpecExec</span> <span class=\"keyword\">of</span> <a href=\"../Flag/index.html#type-t\">Flag.t</a> * int</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Spec execution</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LAction\" class=\"def variant constructor anchored\"><a href=\"#type-t.LAction\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LAction</span> <span class=\"keyword\">of</span> int</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Logical action</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LActionFail\" class=\"def variant constructor anchored\"><a href=\"#type-t.LActionFail\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LActionFail</span> <span class=\"keyword\">of</span> int</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p><i>Failed</i> logical action</p><span class=\"comment-delim\">*)</span></div></li></ol></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-to_yojson\"><a href=\"#val-to_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> to_yojson : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Yojson</span>.Safe.t</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-of_yojson\"><a href=\"#val-of_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> of_yojson : <span><span class=\"xref-unresolved\">Yojson</span>.Safe.t <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"xref-unresolved\">Ppx_deriving_yojson_runtime</span>.error_or</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp\"><a href=\"#val-pp\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp : \u000A  <span><span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-show\"><a href=\"#val-show\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> show : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.string</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-path\"><a href=\"#type-path\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> path</span><span> = <span><a href=\"#type-t\">t</a> list</span></span></code></div><div class=\"spec-doc\"><p>A list of branch cases describes the path of execution.</p><p>Every termination of a symbolic execution is uniquely identified by its branch path.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-path_to_yojson\"><a href=\"#val-path_to_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> path_to_yojson : <span><a href=\"#type-path\">path</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Yojson</span>.Safe.t</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-path_of_yojson\"><a href=\"#val-path_of_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> path_of_yojson : <span><span class=\"xref-unresolved\">Yojson</span>.Safe.t <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-path\">path</a> <span class=\"xref-unresolved\">Ppx_deriving_yojson_runtime</span>.error_or</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_path\"><a href=\"#val-pp_path\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_path : \u000A  <span><span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-path\">path</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-show_path\"><a href=\"#val-show_path\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> show_path : <span><a href=\"#type-path\">path</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.string</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_short\"><a href=\"#val-pp_short\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_short : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div></div>"}