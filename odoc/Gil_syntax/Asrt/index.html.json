{"header":"<h1>Module <code><span>Gil_syntax.Asrt</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Gil_syntax","href":"../index.html","kind":"module"},{"name":"Asrt","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>GIL Assertions</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-atom\"><a href=\"#type-atom\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> atom</span><span> = </span></code><ol><li id=\"type-atom.Emp\" class=\"def variant constructor anchored\"><a href=\"#type-atom.Emp\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Emp</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Empty heap</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-atom.Pred\" class=\"def variant constructor anchored\"><a href=\"#type-atom.Pred\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Pred</span> <span class=\"keyword\">of</span> string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Predicates</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-atom.Pure\" class=\"def variant constructor anchored\"><a href=\"#type-atom.Pure\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Pure</span> <span class=\"keyword\">of</span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Pure formula</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-atom.Types\" class=\"def variant constructor anchored\"><a href=\"#type-atom.Types\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Types</span> <span class=\"keyword\">of</span> <span><span>(<a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> * <a href=\"../../Gillian/Gil_syntax/Type/index.html#type-t\">Gillian.Gil_syntax.Type.t</a>)</span> list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Typing assertion</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-atom.CorePred\" class=\"def variant constructor anchored\"><a href=\"#type-atom.CorePred\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">CorePred</span> <span class=\"keyword\">of</span> string\u000A  * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>\u000A  * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Core assertion</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-atom.Wand\" class=\"def variant constructor anchored\"><a href=\"#type-atom.Wand\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Wand</span> <span class=\"keyword\">of</span> </span><span>{</span></code><ol><li id=\"type-atom.lhs\" class=\"def record field anchored\"><a href=\"#type-atom.lhs\" class=\"anchor\"></a><code><span>lhs : string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>;</span></code></li><li id=\"type-atom.rhs\" class=\"def record field anchored\"><a href=\"#type-atom.rhs\" class=\"anchor\"></a><code><span>rhs : string * <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span>;</span></code></li></ol><code><span>}</span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Magic wand of the form <code>P(...) -* Q(...)</code></p><span class=\"comment-delim\">*)</span></div></li></ol></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-atom_to_yojson\"><a href=\"#val-atom_to_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> atom_to_yojson : <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Yojson</span>.Safe.t</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-atom_of_yojson\"><a href=\"#val-atom_of_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> atom_of_yojson : <span><span class=\"xref-unresolved\">Yojson</span>.Safe.t <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"xref-unresolved\">Ppx_deriving_yojson_runtime</span>.error_or</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-equal_atom\"><a href=\"#val-equal_atom\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> equal_atom : <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.bool</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> t</span><span> = <span><a href=\"#type-atom\">atom</a> list</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-to_yojson\"><a href=\"#val-to_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> to_yojson : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Yojson</span>.Safe.t</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-of_yojson\"><a href=\"#val-of_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> of_yojson : <span><span class=\"xref-unresolved\">Yojson</span>.Safe.t <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"xref-unresolved\">Ppx_deriving_yojson_runtime</span>.error_or</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-equal\"><a href=\"#val-equal\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> equal : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.bool</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-compare\"><a href=\"#val-compare\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> compare : <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> int</span></code></div><div class=\"spec-doc\"><p>Comparison of assertions</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-prioritise\"><a href=\"#val-prioritise\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> prioritise : <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> int</span></code></div><div class=\"spec-doc\"><p>Sorting of assertions</p></div></div><div class=\"odoc-spec\"><div class=\"spec module anchored\" id=\"module-Set\"><a href=\"#module-Set\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> Set</span><span> : <span class=\"xref-unresolved\">Stdlib</span>.Set.S <span class=\"keyword\">with</span> <span><span class=\"keyword\">type</span> <span class=\"xref-unresolved\">elt</span> := <span class=\"xref-unresolved\">t</span></span></span></code></div><div class=\"spec-doc\"><p>Sets of assertions</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-map\"><a href=\"#val-map\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> map : <span><span>(<span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><ul class=\"at-tags\"><li class=\"deprecated\"><span class=\"at-tag\">deprecated</span> <p>Use <a href=\"../Visitors/class-endo/index.html\"><code>Visitors.endo</code></a> instead</p></li></ul></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-lvars\"><a href=\"#val-lvars\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> lvars : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Utils/Containers/SS/index.html#type-t\">Utils.Prelude.SS.t</a></span></code></div><div class=\"spec-doc\"><p>Get all the logical variables in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pvars\"><a href=\"#val-pvars\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pvars : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Utils/Containers/SS/index.html#type-t\">Utils.Prelude.SS.t</a></span></code></div><div class=\"spec-doc\"><p>Get all the program variables in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-alocs\"><a href=\"#val-alocs\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> alocs : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Utils/Containers/SS/index.html#type-t\">Utils.Prelude.SS.t</a></span></code></div><div class=\"spec-doc\"><p>Get all the abstract locations in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-clocs\"><a href=\"#val-clocs\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> clocs : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Utils/Containers/SS/index.html#type-t\">Utils.Prelude.SS.t</a></span></code></div><div class=\"spec-doc\"><p>Get all the concrete locations in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-locs\"><a href=\"#val-locs\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> locs : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Utils/Containers/SS/index.html#type-t\">Utils.Prelude.SS.t</a></span></code></div><div class=\"spec-doc\"><p>Get all locations in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pred_names\"><a href=\"#val-pred_names\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pred_names : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span>string list</span></span></code></div><div class=\"spec-doc\"><p>Returns a list with the names of the predicates that occur in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pure_asrts\"><a href=\"#val-pure_asrts\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pure_asrts : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> list</span></span></code></div><div class=\"spec-doc\"><p>Returns a list with the pure assertions that occur in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-is_pure_asrt\"><a href=\"#val-is_pure_asrt\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> is_pure_asrt : <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> bool</span></code></div><div class=\"spec-doc\"><p>Check if <code>a</code> is a pure assertion</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-make_pure\"><a href=\"#val-make_pure\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> make_pure : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a></span></code></div><div class=\"spec-doc\"><p>Eliminate Emp assertions. Pure assertions are converted to a single formula. This function expects its argument to be a PURE assertion.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp\"><a href=\"#val-pp\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div><div class=\"spec-doc\"><p>Pretty-printer</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_atom\"><a href=\"#val-pp_atom\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_atom : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-full_pp\"><a href=\"#val-full_pp\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> full_pp : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div><div class=\"spec-doc\"><p>Full pretty-printer</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pp_atom_full\"><a href=\"#val-pp_atom_full\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pp_atom_full : <span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-atom\">atom</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-subst_clocs\"><a href=\"#val-subst_clocs\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> subst_clocs : <span><span>(<span>string <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><p><code>subst_clocs subst a</code> Substitutes expressions of the form <code>Lit (Loc l)</code> with <code>subst l</code> in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-subst_expr_for_expr\"><a href=\"#val-subst_expr_for_expr\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> subst_expr_for_expr : \u000A  <span><span class=\"label\">to_subst</span>:<a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span class=\"label\">subst_with</span>:<a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><p><code>subst_expr_for_expr ~to_subst ~subst_with a</code> substitutes every occurence of the expression <code>to_subst</code> with the expression <code>subst_with</code> in <code>a</code></p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-pvars_to_lvars\"><a href=\"#val-pvars_to_lvars\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> pvars_to_lvars : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"#type-t\">t</a></span></code></div><div class=\"spec-doc\"><p>Move pvars to lvars</p></div></div>"}