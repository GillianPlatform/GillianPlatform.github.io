{"header":"<h1>Module <code><span>Gil_syntax.BinOp</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Gil_syntax","href":"../index.html","kind":"module"},{"name":"BinOp","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>GIL Binary Operators</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> t</span><span> = </span></code><ol><li id=\"type-t.Equal\" class=\"def variant constructor anchored\"><a href=\"#type-t.Equal\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Equal</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Equality</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.ILessThan\" class=\"def variant constructor anchored\"><a href=\"#type-t.ILessThan\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">ILessThan</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Less for integers</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.ILessThanEqual\" class=\"def variant constructor anchored\"><a href=\"#type-t.ILessThanEqual\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">ILessThanEqual</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Less or equal for integers</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.IPlus\" class=\"def variant constructor anchored\"><a href=\"#type-t.IPlus\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">IPlus</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Integer addition</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.IMinus\" class=\"def variant constructor anchored\"><a href=\"#type-t.IMinus\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">IMinus</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Integer subtraction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.ITimes\" class=\"def variant constructor anchored\"><a href=\"#type-t.ITimes\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">ITimes</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Integer multiplication</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.IDiv\" class=\"def variant constructor anchored\"><a href=\"#type-t.IDiv\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">IDiv</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Integer division</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.IMod\" class=\"def variant constructor anchored\"><a href=\"#type-t.IMod\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">IMod</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Integer modulus</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FLessThan\" class=\"def variant constructor anchored\"><a href=\"#type-t.FLessThan\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FLessThan</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Less for floats</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FLessThanEqual\" class=\"def variant constructor anchored\"><a href=\"#type-t.FLessThanEqual\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FLessThanEqual</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Less or equal for floats</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FPlus\" class=\"def variant constructor anchored\"><a href=\"#type-t.FPlus\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FPlus</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Float addition</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FMinus\" class=\"def variant constructor anchored\"><a href=\"#type-t.FMinus\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FMinus</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Float subtraction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FTimes\" class=\"def variant constructor anchored\"><a href=\"#type-t.FTimes\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FTimes</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Float multiplication</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FDiv\" class=\"def variant constructor anchored\"><a href=\"#type-t.FDiv\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FDiv</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Float division</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.FMod\" class=\"def variant constructor anchored\"><a href=\"#type-t.FMod\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">FMod</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Float modulus</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.And\" class=\"def variant constructor anchored\"><a href=\"#type-t.And\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">And</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Boolean conjunction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Or\" class=\"def variant constructor anchored\"><a href=\"#type-t.Or\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Or</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Boolean disjunction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.Impl\" class=\"def variant constructor anchored\"><a href=\"#type-t.Impl\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">Impl</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Boolean implication</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseAnd\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseAnd\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseAnd</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise conjunction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseOr\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseOr\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseOr</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise disjunction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseXor\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseXor\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseXor</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise exclusive disjunction</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LeftShift\" class=\"def variant constructor anchored\"><a href=\"#type-t.LeftShift\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LeftShift</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Left bitshift</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SignedRightShift\" class=\"def variant constructor anchored\"><a href=\"#type-t.SignedRightShift\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SignedRightShift</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Signed right bitshift</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.UnsignedRightShift\" class=\"def variant constructor anchored\"><a href=\"#type-t.UnsignedRightShift\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">UnsignedRightShift</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Unsigned right bitshift</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseAndL\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseAndL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseAndL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise conjunction 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseOrL\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseOrL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseOrL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise disjunction 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseXorL\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseXorL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseXorL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise exclusive disjunction 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LeftShiftL\" class=\"def variant constructor anchored\"><a href=\"#type-t.LeftShiftL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LeftShiftL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Left bitshift 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SignedRightShiftL\" class=\"def variant constructor anchored\"><a href=\"#type-t.SignedRightShiftL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SignedRightShiftL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Signed right bitshift 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.UnsignedRightShiftL\" class=\"def variant constructor anchored\"><a href=\"#type-t.UnsignedRightShiftL\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">UnsignedRightShiftL</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Right bitshift 64bit</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseAndF\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseAndF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseAndF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise conjunction float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseOrF\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseOrF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseOrF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise disjunction float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.BitwiseXorF\" class=\"def variant constructor anchored\"><a href=\"#type-t.BitwiseXorF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">BitwiseXorF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Bitwise exclusive disjunction float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LeftShiftF\" class=\"def variant constructor anchored\"><a href=\"#type-t.LeftShiftF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LeftShiftF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Left bitshift float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SignedRightShiftF\" class=\"def variant constructor anchored\"><a href=\"#type-t.SignedRightShiftF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SignedRightShiftF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Signed right bitshift float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.UnsignedRightShiftF\" class=\"def variant constructor anchored\"><a href=\"#type-t.UnsignedRightShiftF\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">UnsignedRightShiftF</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Unsigned right bitshift float</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.M_atan2\" class=\"def variant constructor anchored\"><a href=\"#type-t.M_atan2\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">M_atan2</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Arctangent y/x</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.M_pow\" class=\"def variant constructor anchored\"><a href=\"#type-t.M_pow\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">M_pow</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Power</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LstNth\" class=\"def variant constructor anchored\"><a href=\"#type-t.LstNth\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LstNth</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Nth element of a string</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.LstRepeat\" class=\"def variant constructor anchored\"><a href=\"#type-t.LstRepeat\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">LstRepeat</span></span></code></li><li id=\"type-t.StrCat\" class=\"def variant constructor anchored\"><a href=\"#type-t.StrCat\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">StrCat</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>String concatenation</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.StrNth\" class=\"def variant constructor anchored\"><a href=\"#type-t.StrNth\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">StrNth</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Nth element of a string</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.StrLess\" class=\"def variant constructor anchored\"><a href=\"#type-t.StrLess\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">StrLess</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Less or equal for strings</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SetDiff\" class=\"def variant constructor anchored\"><a href=\"#type-t.SetDiff\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SetDiff</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Set difference</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SetMem\" class=\"def variant constructor anchored\"><a href=\"#type-t.SetMem\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SetMem</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Set membership</p><span class=\"comment-delim\">*)</span></div></li><li id=\"type-t.SetSub\" class=\"def variant constructor anchored\"><a href=\"#type-t.SetSub\" class=\"anchor\"></a><code><span>| </span><span><span class=\"constructor\">SetSub</span></span></code><div class=\"def-doc\"><span class=\"comment-delim\">(*</span><p>Subset</p><span class=\"comment-delim\">*)</span></div></li></ol></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-to_yojson\"><a href=\"#val-to_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> to_yojson : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Yojson</span>.Safe.t</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-of_yojson\"><a href=\"#val-of_yojson\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> of_yojson : <span><span class=\"xref-unresolved\">Yojson</span>.Safe.t <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"xref-unresolved\">Ppx_deriving_yojson_runtime</span>.error_or</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-equal\"><a href=\"#val-equal\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> equal : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"xref-unresolved\">Ppx_deriving_runtime</span>.bool</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-str\"><a href=\"#val-str\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> str : <span><a href=\"#type-t\">t</a> <span class=\"arrow\">&#45;&gt;</span></span> string</span></code></div><div class=\"spec-doc\"><p>Printer</p></div></div>"}