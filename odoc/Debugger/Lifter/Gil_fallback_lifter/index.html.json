{"header":"<h1>Module <code><span>Lifter.Gil_fallback_lifter</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../../../index.html","kind":"page"},{"name":"Gillian","href":"../../../index.html","kind":"module"},{"name":"Debugger","href":"../../index.html","kind":"module"},{"name":"Lifter","href":"../index.html","kind":"module"},{"name":"Gil_fallback_lifter","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>A <a href=\"../index.html\"><code>Lifter</code></a> implementation that acts as a proxy to another lifter (<code>TLLifter</code>), while also keeping a <a href=\"../Gil_lifter/index.html\"><code>Gil_lifter</code></a> updated alongside.</p><p><code>TLLifter</code> can access the GIL lifter and its state via <a href=\"module-type-Gil_lifter_with_state/index.html\"><code>Gil_lifter_with_state</code></a>.</p><p>Note that if the GIL lifter gives anything other than <code>Stop</code> when handling a command, it is considered skipped, and <code>TLLifter</code> won't be asked to handle it.</p>","content":"<div class=\"odoc-spec\"><div class=\"spec module-type anchored\" id=\"module-type-Gil_lifter_with_state\"><a href=\"#module-type-Gil_lifter_with_state\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> <span class=\"keyword\">type</span> <a href=\"module-type-Gil_lifter_with_state/index.html\">Gil_lifter_with_state</a></span><span> = <a href=\"module-type-Gil_lifter_with_state/index.html\">Gil_fallback_lifter.Gil_lifter_with_state</a></span></code></div><div class=\"spec-doc\"><p>A <a href=\"../Gil_lifter/index.html\"><code>Gil_lifter</code></a>, along with a function to get its state</p></div></div><div class=\"odoc-spec\"><div class=\"spec module anchored\" id=\"module-Make\"><a href=\"#module-Make\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> <a href=\"Make/index.html\">Make</a></span><span>\u000A  (<a href=\"Make/argument-1-SMemory/index.html\">SMemory</a> : <a href=\"../../../../Engine/SMemory/module-type-S/index.html\">Engine.SMemory.S</a>)\u000A  (<a href=\"Make/argument-2-PC/index.html\">PC</a> : <a href=\"../../../Command_line/ParserAndCompiler/module-type-S/index.html\">Command_line.ParserAndCompiler.S</a>)\u000A  (<a href=\"Make/argument-3-TLLifter/index.html\">TLLifter</a> : \u000A    <span class=\"keyword\">functor</span><span> (<a href=\"Make/argument-3-TLLifter/argument-1-Gil/index.html\">Gil</a> : <span class=\"keyword\">sig</span> ... <span class=\"keyword\">end</span>) <span class=\"arrow\">&#45;&gt;</span></span>\u000A    <span class=\"keyword\">functor</span><span> (<a href=\"Make/argument-3-TLLifter/argument-2-V/index.html\">V</a> : <a href=\"../../../../Engine/Verifier/module-type-S/index.html\">Engine.Verifier.S</a> <span class=\"keyword\">with</span> <span><span class=\"keyword\">type</span> <a href=\"../../../../Engine/Verifier/module-type-S/index.html#type-annot\">annot</a> = <a href=\"Make/argument-2-PC/Annot/index.html#type-t\">PC.Annot.t</a></span>) <span class=\"arrow\">&#45;&gt;</span></span>\u000A    <span class=\"keyword\">sig</span> ... <span class=\"keyword\">end</span>)\u000A  (<a href=\"Make/argument-4-V/index.html\">V</a> : <a href=\"../../../../Engine/Verifier/module-type-S/index.html\">Engine.Verifier.S</a> <span class=\"keyword\">with</span> <span><span class=\"keyword\">type</span> <a href=\"../../../../Engine/Verifier/module-type-S/index.html#type-annot\">annot</a> = <a href=\"Make/argument-2-PC/Annot/index.html#type-t\">PC.Annot.t</a></span>) : \u000A  <span class=\"keyword\">sig</span> ... <span class=\"keyword\">end</span></span></code></div></div>"}