{"header":"<h1>Module <code><span>Engine.Typing</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Engine","href":"../index.html","kind":"module"},{"name":"Typing","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"","content":"<div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-type_lexpr\"><a href=\"#val-type_lexpr\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> type_lexpr : \u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Gil_syntax/Type/index.html#type-t\">Gillian.Gil_syntax.Type.t</a> option</span> * bool</span></code></div><div class=\"spec-doc\"><p>Given a typing environment and an expressions, returns a triple containing:</p><ul><li>A type if we found a necessary type</li><li>A boolean: true if the expression is typable, false if is definitely a type error</li><li>A list of corrections missing (not sure about that one ?)</li></ul></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-infer_types_expr\"><a href=\"#val-infer_types_expr\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> infer_types_expr : <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-reverse_type_lexpr\"><a href=\"#val-reverse_type_lexpr\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> reverse_type_lexpr : \u000A  <span>bool <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span><span>(<a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> * <a href=\"../../Gillian/Gil_syntax/Type/index.html#type-t\">Gillian.Gil_syntax.Type.t</a>)</span> list</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> option</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-te_of_list\"><a href=\"#val-te_of_list\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> te_of_list : \u000A  <span><span><span>(<a href=\"../../Gillian/Gil_syntax/Expr/index.html#type-t\">Gillian.Gil_syntax.Expr.t</a> * <a href=\"../../Gillian/Gil_syntax/Type/index.html#type-t\">Gillian.Gil_syntax.Type.t</a>)</span> list</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> option</span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-naively_infer_type_information\"><a href=\"#val-naively_infer_type_information\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> naively_infer_type_information : \u000A  <span><a href=\"../../Gillian/Symbolic/Pure_context/index.html#type-t\">Symbolic.Pure_context.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  unit</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-substitution_in_place\"><a href=\"#val-substitution_in_place\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> substitution_in_place : \u000A  <span><a href=\"../../Gillian/Symbolic/Subst/index.html#type-t\">Gillian.Symbolic.Subst.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><a href=\"../../Gillian/Symbolic/Type_env/index.html#type-t\">Symbolic.Type_env.t</a> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  unit</span></code></div></div>"}