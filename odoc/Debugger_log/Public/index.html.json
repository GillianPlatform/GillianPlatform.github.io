{"header":"<h1>Module <code><span>Debugger_log.Public</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../index.html","kind":"page"},{"name":"Debugger_log","href":"../index.html","kind":"module"},{"name":"Public","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>Functions for sending log messages to the debugger frontend</p>","content":"<div class=\"odoc-spec\"><div class=\"spec module anchored\" id=\"module-JsonMap\"><a href=\"#module-JsonMap\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> <a href=\"JsonMap/index.html\">JsonMap</a></span><span> : <span class=\"keyword\">sig</span> ... <span class=\"keyword\">end</span></span></code></div><div class=\"spec-doc\"><p>A mapping of strings to <code>Yojson</code> values</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-log\"><a href=\"#val-log\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> log : \u000A  <span><span class=\"optlabel\">?v</span>:bool <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span>(<span><span>(<span><span class=\"optlabel\">?json</span>:<a href=\"JsonMap/index.html#type-t\">JsonMap.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span><span><span>(<span class=\"type-var\">'a</span>, <span class=\"xref-unresolved\">Stdlib</span>.Format.formatter, unit)</span> <span class=\"xref-unresolved\">Stdlib</span>.format</span> <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"type-var\">'a</span>)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A    unit)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  unit</span></code></div><div class=\"spec-doc\"><p>Sends a log message to the debugger frontend via a custom event. Optionally includes some accompanying JSON.</p><p>A couple of things to bear in mind:</p><ul><li>If debugging isn't enabled (or <a href=\"../index.html#val-setup\"><code>setup</code></a> hasn't been called yet), this function does nothing, i.e. the passed function isn't called.</li><li>The message is sent asynchronously; it may, for example, arrive after an error is raised, despite being called before.</li><li>The message is also logged to the debugger log file (see <a href=\"#val-to_file\"><code>to_file</code></a>), though without the JSON - if JSON is provided, the message is suffixed with <code>(+)</code>.</li></ul></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-to_file\"><a href=\"#val-to_file\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> to_file : <span>string <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div><div class=\"spec-doc\"><p>Logs a message to the debugger log file (<code>gillian-debugger.log</code> in the current working directory). This is more reliable than <a href=\"#val-log\"><code>log</code></a>, but more unwieldy, and doesn't support attached JSON.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-show_report\"><a href=\"#val-show_report\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> show_report : <span><span class=\"optlabel\">?v</span>:bool <span class=\"arrow\">&#45;&gt;</span></span> <span><a href=\"../../Gillian/Logging/Report_id/index.html#type-t\">Gillian.Logging.Report_id.t</a> <span class=\"arrow\">&#45;&gt;</span></span> <span>string <span class=\"arrow\">&#45;&gt;</span></span> unit</span></code></div><div class=\"spec-doc\"><p>Logs a message (as with <a href=\"#val-log\"><code>log</code></a>), but attaches the type and (parsed) content of the specified report.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-failwith\"><a href=\"#val-failwith\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> failwith : <span><span>(<span>unit <span class=\"arrow\">&#45;&gt;</span></span> <a href=\"JsonMap/index.html#type-t\">JsonMap.t</a>)</span> <span class=\"arrow\">&#45;&gt;</span></span> <span>string <span class=\"arrow\">&#45;&gt;</span></span> <span class=\"type-var\">'a</span></span></code></div><div class=\"spec-doc\"><p>Raises an exception with a string message and attached JSON.</p><p>Note that if debugging isn't enabled, then the JSON function is ignored, and a regular `Failure` is raised instead.</p></div></div>"}