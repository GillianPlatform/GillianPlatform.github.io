{"header":"<h1>Module <code><span>Command_line.ParserAndCompiler</span></code></h1>","type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"Index","href":"../../../../index.html","kind":"leaf-page"},{"name":"gillian","href":"../../../index.html","kind":"page"},{"name":"Gillian","href":"../../index.html","kind":"module"},{"name":"Command_line","href":"../index.html","kind":"module"},{"name":"ParserAndCompiler","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>This defines an interface that allows a user to indicate how to parse their own programming language, preprocess the obtained language and compile it to GIL (type <code>Prog.t</code>)</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-compiled_progs\"><a href=\"#type-compiled_progs\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> <span>('annot, 'tl_ast, 'init_data) compiled_progs</span></span><span> = </span><span>{</span></code><ol><li id=\"type-compiled_progs.gil_progs\" class=\"def record field anchored\"><a href=\"#type-compiled_progs.gil_progs\" class=\"anchor\"></a><code><span>gil_progs : <span><span>(string * <span><span>(<span class=\"type-var\">'annot</span>, string)</span> <a href=\"../../Gil_syntax/Prog/index.html#type-t\">Gil_syntax.Prog.t</a></span>)</span> list</span>;</span></code></li><li id=\"type-compiled_progs.source_files\" class=\"def record field anchored\"><a href=\"#type-compiled_progs.source_files\" class=\"anchor\"></a><code><span>source_files : <a href=\"../../../IncrementalAnalysis/SourceFiles/index.html#type-t\">IncrementalAnalysis.SourceFiles.t</a>;</span></code></li><li id=\"type-compiled_progs.tl_ast\" class=\"def record field anchored\"><a href=\"#type-compiled_progs.tl_ast\" class=\"anchor\"></a><code><span>tl_ast : <span class=\"type-var\">'tl_ast</span>;</span></code></li><li id=\"type-compiled_progs.init_data\" class=\"def record field anchored\"><a href=\"#type-compiled_progs.init_data\" class=\"anchor\"></a><code><span>init_data : <span class=\"type-var\">'init_data</span>;</span></code></li></ol><code><span>}</span></code></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-get_progs_or_fail\"><a href=\"#val-get_progs_or_fail\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> get_progs_or_fail : \u000A  <span><span class=\"label\">pp_err</span>:<span>(<span><span class=\"xref-unresolved\">Stdlib</span>.Format.formatter <span class=\"arrow\">&#45;&gt;</span></span> <span><span class=\"type-var\">'a</span> <span class=\"arrow\">&#45;&gt;</span></span> unit)</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span><span>(<span><span>(<span class=\"type-var\">'b</span>, <span class=\"type-var\">'c</span>, <span class=\"type-var\">'d</span>)</span> <a href=\"#type-compiled_progs\">compiled_progs</a></span>, <span class=\"type-var\">'a</span>)</span> <span class=\"xref-unresolved\">Stdlib</span>.result</span> <span class=\"arrow\">&#45;&gt;</span></span>\u000A  <span><span>(<span class=\"type-var\">'b</span>, <span class=\"type-var\">'c</span>, <span class=\"type-var\">'d</span>)</span> <a href=\"#type-compiled_progs\">compiled_progs</a></span></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec module-type anchored\" id=\"module-type-S\"><a href=\"#module-type-S\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> <span class=\"keyword\">type</span> <a href=\"module-type-S/index.html\">S</a></span><span> = <a href=\"module-type-S/index.html\">ParserAndCompiler.S</a></span></code></div></div><div class=\"odoc-spec\"><div class=\"spec module anchored\" id=\"module-Dummy\"><a href=\"#module-Dummy\" class=\"anchor\"></a><code><span><span class=\"keyword\">module</span> <a href=\"Dummy/index.html\">Dummy</a></span><span> : <span class=\"keyword\">sig</span> ... <span class=\"keyword\">end</span></span></code></div><div class=\"spec-doc\"><p>Dummy ParserAndCompiler that will simply always fail. This is used when someone wants to build a command line interface to only reason about GIL.</p></div></div>"}